[{"body": "I love good football game very much and Champion's League finals have been my favorite match of the year ever since the legendary 1999\u2032s finals between Manchester United and Bayern Munich. This year's finals promised another good game and I went to watch it with some friends to a bar next to Ljubljanica river. There are several bars close by along this stretch of the river each with an outside garden and a big TV for football loving patrons. Sipping beer and watching the game was a very nice experience, but only until we noticed that the people at the neighboring bar got to see the action five seconds before we do. They watched the game on a different television channel with less time delay. After half an hour of hearing about the game first from the shouting people in the bar next door and only seeing it five seconds later from the television screen in our bar, we decided to move next door's. Watching a football game with a delay just isn't a fun thing to do.\nThe modern digital TV has an approximately 2 minutes of delay from the real action, mostly due to the time needed to perform various forms of coding and recoding. In the past this wasn't such a big problem, since television had the monopoly on transferring information from the field to the living rooms. But recent proliferation of the second screen phenomena is changing this paradigm entirely, since Twitter and Facebook broke the monopoly of big media on real-time information transfer. The following tweet by Werner Vogels explains the situation the best\nswitched off twitter as @foxsoccer2go runs about 2 minutes behind real-time. #annoying #citajax -\nWerner Vogels (@Werner) November 06, 2012\nIt will be very interesting to see the effect of this discrepancy. I think this is a great opportunity for some startup to solve.", "title": "Second Screen and Digital TV"}, {"body": "I gave a talk at Kiberpipa yesterday about the state of the web search. My main point was that the web search is no longer a growing industry and it might already be on the path to irrelevance. The first victim of this change will be the SEO industry which will be pushed out by Google searching for more revenue. But the second victim might be Google itself, since web search is being fundamentally disrupted by the mobile revolution.", "title": "Go disrupt the Web Search! Mobile changes everything!"}, {"body": "Yesterday's frenzy of tracking results of US presidential elections was yet another demonstration of the importance of timely and accurate counting. Knowing how many events has happened is the cornerstone of statistics and statistics is the foundation of all modern science and engineering. Counting has made Google successful and counting is gaining even more prominence recently with the increased use of social signals in algorithms powering many web services.\nIt is very difficult to implement counters using traditional storage systems in a scalable way, since traditional storage systems operate in a lock-read-update-write-release sequence, thus preventing high frequency updates of counters to be performed in parallel. There were many specialized solutions devised over the years that enabled fast parallel counting, but only with the recent development of cassandra counters we got a general-purpose tool for highly available counters that could be incremented with high frequency.\nAt Zemanta we have started to use cassandra counters only recently, so we don't have extensive experience with it yet. But first impression is extremely positive. We are able to process ~100 increments per second effortlessly on a very modest hardware setup. Additonally, counting is very fast with an average time needed to do an increment of ~5ms and maximums rarely exceeding 30 ms.", "title": "Cassandra Counters"}, {"body": "(A few days back I was again referring to my old post Comments are not Code when talking with my coworker. I published that post some time ago at my former blog and to make it more accessible I'm republishing it here.)\nI'm a firm believer that the best software documentation is the running code. If the code is well structured and written, it speaks for itself and it does not need any additional documentation. Comments are not code and therefore should not be used where better code organization would suffice.\nA misplaced use of comments that I often see while doing code reviews is to use comments to divide a method into logical subunits. For example:\ndef check_specific_candidate():    # first check if we already have X by any chance   < 10 lines of code, return if true>    # Try out if candidate is Y   < 30 lines of code, return if true>    # candidate is not Y, try out if it is Z   < another 30 lines of code, return if true>    # construct a list of elements in the candidate   < another 30 lines of code>    if len(list_of_elements) > 0:     # process list of elements for the candidate     < another 10 lines of code>\nThis example is based on actual routine in Zemanta code base that is altogehter 140 lines long. Supporting such code is not a nice experience. While comments in this routine do help, they are actually a symptom of a larger problem, i.e. poor code organization. Comments would immediately become redundant, if this routine would be split into logical steps with each step being a separate routine. Let's refactor the above routine as such:\ndef check_specific_candidate(candidate):    if _candidate_has_X(candidate):     return    if _candidate_is_Y(candidate):     return    if _candidate_is_Z(candidate):     return    list_of_elements = _get_list_of_elements(candidate)   if len(list_of_elements) > 0:     _process_list_of_elements(list_of_elements)\nSo instead of using comments, this routine is now documented using method names. When you approach such code for the first time, seeing such nice 15-lines long routine is much less stressful than seeing a 140-lines long monster.", "title": "Comments are not Code"}, {"body": "In April, I wrote how at Zemanta, we constantly move between the Amazon Web Services (AWS) and our dedicated servers in order to optimize costs of our operations. These two options are quite extreme, so recently we started to use the third option provided by German server infrastructure provider Hetzner that is somewhere between AWS and owning your servers in elasticity, but much more cost effective than both of these options. Hetzner provides a quick provision of dedicated servers for a very competitive price and without requiring long time commitment.\nAWS is the word leading cloud provider and it is seven times bigger than the nearest competitor. Economies of scale that AWS enjoys are enormous, but also the complexity of providing such service is beyond grasp of a layman. Hetzner took a very different approach and instead of virtual servers it provides access to bare metal at scale and with ease of AWS. For most loads elasticity provided by AWS is an overkill that it's not worth paying for. The cloud computing is exiting peak of inflated expectations and it seems the pendulum is now moving towards less complex solutions.\nWhile it's always nice to see engineers dressed up, it's the non-rack servers that are stealing the show on this photo (source: Hetzner Online AG)", "title": "Hetzner"}, {"body": "Over the past 15 years web search has become a 20 billion dollars industry. But web has evolved in this time and consequently also the web search is going through some big changes at the moment. Social recommendations are gaining in importance, mobile is rising, and Google is no longer just a proxy, but increasingly also a destination. Implications for users, content creators, SEO industry (including Zemanta), and Google itself will be momentous.\nTo discuss all these changes I'm inviting you to Kiberpipa on Wednesday, November 7th at 19:00. I'll present you with some fresh information and insights about the state of the web search that I've acquired at SIGIR in Portland that was attended by some of the most important people in search industry. I wish for an open discussion, so come with your arguments sharpened!", "title": "Talk at Kiberpipa: The State of the Web Search"}, {"body": "Imagine an airplane without windows and instruments and you'll get a pretty accurate picture of most startups. Listening to the sound of the roaring engines, startup founders like to think to themselves: \"We're going full throttle, so we must be going somewhere!\" But without windows to interact with the customers and no instruments to measure direction, speed, and operation of the service, the startup can really go in just any direction or can even go in circles. As in real world, safe landing spots are few and most of the blind flying endeavors end in crash.\nI think most of the startups are caught by surprise how time consuming is looking through the windows and how difficult is to define meaningful measurements that can be trusted and acted upon. At Zemanta we've learned that the hard way. It has been a year since we started looking through the windows, it has been half a year since we are measuring the operation of our service, and only recently we have started to insist that everything we do must produce measurable outcomes. If you don't want to repeat Zemanta's mistakes and you are about to found a startup, I very much recommend that your first action is to draw the first and the most important indicator on a (virtual) whiteboard\nthus starting a build-measure-learn cycle.", "title": "Flying Blind"}, {"body": "Many years ago Al Fisher, an american friend of mine, told me, that if you want to eat an elephant all you should do is just take the first bite, then the second bite, and, eventually, after taking many bites, you will eat the whole elephant. Even though this recipe is very simple, it still eludes many people. Facing an elephant, many people spend days, months, or years contemplating where to start instead of just taking the first step and start eating.\nI was reminded of this story yesterday, when two people asked me how could they get a job at a software company even though they have only basic experience with programming. I compliment both of them for taking the first step of asking for an advice. As for the second step, I've recommended to both of them to just start programming. There exists so many free resources on the web, that learning programming should be within reach of anybody willing to learn.", "title": "How to Eat an Elephant"}, {"body": "Luka Birsa on why hardware is cool\nYesterday we kicked off the second season of #VBlatu lecture series with an excellent talk by Luka Birsa about building low powered devices in particular and hardware startups in general. Luka is a CTO of Visionect, a Ljubljana startup which got substantial founding last month to build a general purpose tablet for various special purposes, from supplanting restaurant menus to boat control devices.\nThe only time I was trying to do something with hardware, the project become a catastrophe. Consequently I promised myself, never to have anything to do with hardware ever again. But Luka's passion for hardware was so palpable yesterday, that even I contemplated trying out to do something physical that you can actually touch and show to your family.\nIf you're keen on building real stuff, now it is perfect time to do it, as explained yesterday by Luka in person and Paul Graham on his blog.", "title": "Hardware is Cool (again)"}, {"body": "Yesterday I had a workshop for the first generation of TSstartups. I've tried to convey to them that software engineering in startups is a bit different than the experience they got at school, in personal projects, or at more traditional software companies. I hope that at least some of them understands now that the role of programmers in a startup is not to play with the latest and greatest (unreliable technology) but being an essential member of a product discovery team. I've also presented to them the tools and technology that we are using at Zemanta and they might find useful in their startups, too.", "title": "Software Engineering in Startups"}, {"body": "I was first introduced to the world of relational databases some 15 years ago, while developing geographic information systems (GIS) at Monolit. At that time GIS were just making a transition from storing attribute information in flat files to storing them in relational databases, while relational databases just started their expansion from the world of accounting and financial applications to other application domains. Oracle was especially aggressive in the field of GIS, so we've ended up using it. The world of relational databases has since commoditized, but Oracle somehow managed to keep his price very high. Therefore later in my career the free and open-sourced PostgreSQL has increasingly become a viable option in my projects. Except for missing a few very useful features (e.g. partitions), PostgreSQL didn't feel much different than Oracle, so my concept of a relational database didn't change a lot.\nMy perception of relational databases was eventually shattered when I joined Zemanta and I started using MySQL. Deceived by having SQL in its name, I thought MySQL is yet another open-source implementation of trimmed-down Oracle, just like PostgreSQL is. Quite to my surprise I've found out that except for the common SQL interface MySQL has very little in common with Oracle and other traditional databases. MySQL is really only about performance, while reliability and consistency, the essence of traditional relational databases, aren't such a big concern. Consequently, it took me quite a while to acknowledge MySQL for what it is and adjust my perception of relational databases accordingly.", "title": "Transitioning from Oracle thru PostgreSQL to MySQL"}, {"body": "If I'd have to choose a single contribution of mine with the most impact to Zemanta, pushing for more whiteboards would be it. When I've joined Zemanta three years ago, we had just one small whiteboard, while now we have 14! I got to see the power of whiteboards for the first time at Nil, more than 10 years ago. At that time I was working on Nil's remote labs project together with Milan and Miha, and we shared a room with a big whiteboard. We've done all the designing and planning on this whiteboard, and it was also our best documentation tool. I didn't understand it then, but this was my first project done the extreme programming way.\nZemanta offices by King Molan: http://www.flickr.com/photos/king-molan/5848101874/", "title": "The Greatest Communication Tool Ever"}, {"body": "Many organizations do team building exercises. I took part in many of them and they are usually quite fun. But besides being fun and relaxing events, they aren't really building any teams. What really builds a team is fighting tough battles together in the middle of the night. In such situations the true power of empowered teams come to the fore and it is in such times that emancipated team members really excel. It takes lots of time, energy, and most importantly patience to build such a team. But once you have it assembled, there's nothing what such team couldn't accomplish!", "title": "Team Building"}, {"body": "One of the sad facts of our industry is that there are very few women programmers. While many male programmers are oblivious to this issue, I think our industry is loosing a lot by not having more women in our midst. Personal relations would benefit in particular if there would be more women in software development teams. Programming is not physically strenuous nor it requires any gender specific skills, so there doesn't seem to be any intrinsic reason for the lack of women programmers. Even more, in the 1980s there were almost equal share of women as man studying computer science. But with every passing decade the share of women studying computer science has declined sharply to it's current level of just 10%!\nI've discussed the issue of lack of women programmers with quite some people lately. It seems that the main reason for few women programmers is lack of role models that girls could look up. There are very few Leah Culvers in the world and I know of only one Pija Re\u017eek in Slovenia. Without role models there are no female computer science students, and without female computer science students there won't be role models. I really think we, the computer professionals, should do better work at breaking this vicious cycle. Therefore next year, we should celebrate Ada Lovelace Day also in Slovenia!\nMy daughters enthusiastically programming in Scratch after attending CoderDojo (www.coderdojo.si)", "title": "Ada Lovelace Day"}, {"body": "In the last couple of posts I've tried to analyze why quite many programmers reject agile even though the agile manifesto should be a program of emancipation for programmers written by programmers out of decades of experience of programmers. In my experience it is not that programmers renounce any of the proclamation of the agile manifesto; it is only that they dislike some of the changes that happen when an organization tries to become more agile.\nAgile is not an unbreakable monolith, but a set of values, principles, and practices put together into a coherent framework. Not all of these building blocks cause discomfort to programmers. The daily meetings and demos have been performed by good programmers already in the heydays of waterfall. Empowered teams of emancipated programmers led in a democratic fashion has always been the most efficient way of organizing knowledge workers. And letting the process be implemented by those who practice it, either through retrospectives or in any other way, is the most effective way how to introduce meaningful change in any organization, not just in software companies or startups. Finally, having a product development process in place that makes sure the company builds the right product is much more important for the success of the company than building the product right.\nOnly after we introduce iterations (XP or scrum) or work in progress limits (kanban) the pressure starts to build in the team and things start to explode. I think that it makes a lot of sense to well prepare the team and the organization by introducing practices described in the previous paragraph first, before putting a lid on the pressure cooker that is your team by introducing iterations or kanban limits.", "title": "The Pressure Cooker"}, {"body": "Source: http://www.flickr.com/photos/tef/3159937037/\nThe last issue I will cover in this mini-series on the unattended side-effects of agile is probably the most controversial. In my opinion lean and agile by themselves do not promote high-quality software engineering, but on the contrary, they are suppressing the excellence.\nThese days they say in Silicon Valley: \"If you're not embarrassed of the first version of your product, you've shipped too late\" I very much agree that from the business and product management standpoint it makes a lot of sense to put products to the hands of end users as soon as possible so that customer feedback can be garnered immediately. But from the angle of an engineer this position is really hard to swallow. Engineers are proud people who define themselves through results of their work. Forcing engineers to constantly do make-shift work with no time for doing things properly is a recipe for miserable engineers.\nI believe the business and product managers must understand that engineers are special people that must be treated with respect. I'll provide tomorrow some remedies how to enable fast product discovery while still keeping excellence in engineering.", "title": "Suppressing the Excellence"}, {"body": "Auger Loizeau: Isophone (http://www.auger-loizeau.com)\nEngineers adore solving problems that nobody has and we love solving problems with technology, even if non-technological solution would be much more efficient. Occasionally this approach produces things that gain mass appeal and then we like to pat each other on our engineering's backs that we are so smart and the users so stupid. You hear even very bright and open-minded engineers uttering non-senses such as that \"if Henry Ford had asked people what they wanted, they would have said faster horses\", though history teaches us that Karl Benz patented automobile in 1885, while  Model T was introduced more than 20 years later when the concept of a automobile was already validated by the users.\nThe best remedy how to bring engineers from their ivory towers is to get them in contact with the real users of their products. But if you'll force your programmers to participate at user interviews their feeling of superiority will only increase while watching users' ignorance. Much better approach is to show to the engineers only the parts of the interviews where their product was obviously failing and the parts where the users used the product in an innovative way unanticipated by the programmer. Showing the engineers such unexpected episodes shatters their feeling of omniscience and superiority and make them interested in actually listening to the users, which is the first step towards building the products that people would actually buy and use.", "title": "Productivizing the Engineer"}, {"body": "Yesterday 126 alumni of Faculty of Computer and Information Science met at The National Museum of Contemporary History and founded an alumni club. The event was short and sweet, and from what I could see, all the participants had very nice time.\nAlumni UL FRI meetup\nAs I'm contemplating this event this morning and the considerable amount of effort that we have all put in organizing it, what keeps on amazing me is how easy it is to get 126 people to raise their hands. If the time is right and the opportunity ripe, it takes only a tiny spark to ignite an ample fire.", "title": "Gettting 126 People to Raise their Hands"}, {"body": "As I've explained yesterday, forcing agile on an introvert programmer is never a good idea. If pushed too hard the silo that the introvert programmer has built around him over the years will explode violently with devastating effects for both, the introvert and the agile transformation. So instead of adapting the introvert to agile, I'd recommend adapting the agile to the introvert (isn't being agile about being adaptable in the first place?).\nWhat I've learned in my career from discussions with several introvert programmers is that they are not happy in their silo and they want to get out of it also themselves. But without some guidance and a bit of push from managers they will get out of the existing silo only to start another one. Therefore, introvert's intrinsic motivation for change should be used to change introvert's way of work and not his object of work.\nIn my experience the two most effective ways to change introvert's way of work are code reviews and sit together. The code reviews are almost as effective in socializing the programmers and building strong engineering culture as pair programming, but without it's many issues with physical proximity, personality differences, and synchronization requirements. The second effective way how to gently change the introvert is to sit him together with the rest of the team and by all means prevent him from being physically separated from the others. Even if the introvert doesn't actively participate in group activities, by sitting together with the group he will soak in the group culture and it will be easier for the group to spontaneously involve him in the group activities.", "title": "Breaking Down the Silo"}, {"body": "Source: http://www.flickr.com/photos/docsearls/5500714140/\nThe second pronounced side effect of an engineering organization transforming itself to agile, is the extroversion of the introvert. The cornerstone of agile approaches is personal communications, or in the words of agile manifesto, individuals and interactions over processes and tools. But quite many programmers don't feel comfortable interacting with others or just lack social skills, and they got attracted to computers exactly because it doesn't require any personal communication.\nWhile many agile coaches think that such introverted programmers will either have to adapt or leave, what always happens in such situations is that agile is forced to adopt to the introverts, and not vice versa. Namely, around an introvert programmer a silo always forms and this silo usually includes the critical piece of the system. In the minds of top managers, the critical piece of the system and the introvert keeping it in his silo are inseparable, which results in a sacred cow that nobody is allowed to touch.\nI've met several such introverts in my career. What's interesting about them is that they always seem to want to get out of their silo themselves, since they got bored doing the same things day after day and they actually miss interaction with the rest of the team. While forcing agile on the introvert always results in violent clashes, there exists several gentler approaches how to open the introverts up and bring them closer to the rest of the team. I'll describe these approaches tomorrow.", "title": "Extroverting the Introvert"}, {"body": "Yesterday I described one of the more pronounced side effects of transformation to agile organization, that is, generalization of the specialist. In today's post I'll present two remedies that makes such transition easier and less painful for programmers.\nI've seen it at Zemanta and I've seen it at several other places, too, that an organization transforms itself to agile only to find out that it's product development process is flawed. It makes no business sense to try building the product right if what you're building is not the right product. And if you're team feels that it's building the right product with real user adoption, it will be much easier for them to adapt themselves to do different things or to do things differently. Therefore, I'd really recommend to start transformation to agile with the definition of product development process and roles, and with the product roadmap and backlog in place.\nThe second remedy I'd recommend for easier generalization of a specialist is to start encouraging people to take more responsibility for their work. So instead of having a programmer doing only coding, encourage him to take responsibility also for design, quality assurance, and operation of his code. Even a guy fresh out of college is capable of coming with design for some part of the system, if he's only allowed to do it by his more senior colleagues. And if you put continuous deployment in place, quality assurance will no longer be someone else's business. Similarly, if the developer is called late at night to fix his malfunctioned code in production, he will never again just throw the code over to operations people. And once you manage to stretch person's scope of work outside of pure coding, it will be much easier to get him involved with product discovery or customer support, too.", "title": "Shifting and Stretching the Specialist"}, {"body": "Source: http://www.flickr.com/photos/raster/3380860520/\nOne of the most pronounced side effects of an engineering organization transforming itself to agile, is the generalization of the specialist. In most engineering organizations engineers are handled with great care. Even so much, that product priorities are adjusted to fit the needs and whims of engineers. The priorities defined by engineers are usually quite different than priorities of customers and when an organization becomes agile development priorities almost always change. And they keep on changing as the product discovery keeps on unearthing different pain points the users are having with your product. Consequently, a programmer is forced to get acquainted with all the systems in place and all technologies used, but with all of them, only in passing. In a true agile, there's  no place for people interested only in one type of technology or just a part of the system.\nIn addition to frequent shifts in product priorities, agile programmers are expected to do not only coding, but also testing, system administration, planning, designing, interviewing users, and making many other decisions outside of their core technical expertise. These people, who build their identify and self-esteem upon their technical knowledge and skills, consequently lose their grounds and become utterly lost. Quite many programmers have big problems abandoning their specialist status and if left to their own devices, they will at least grumble if not outrightly sabotage the transformation to agile.\nSince this post is already rather large, I'll leave for next time the description of some effective remedies that makes transition from specialist to generalist easier on programmer.", "title": "Generalization of the Specialist"}, {"body": "Agile manifesto is a program of emancipation for programmers written by programmers out of decades of experience of programmers. While preparing for my Programming, Motherfucker talk at Agile Slovenia, I've calculated that original 17 signatories of the agile manifesto had collectively 160 years of programming experience when they signed the manifest in 2001. Just one of them, Kent Beck, has been developing software for the past 35 years and it's currently developing and optimizing a C++/Thrift server to handle all messaging traffic at Facebook. So if the agile manifesto comes of programmers, by programmers, why the need for anti-agile manifesto and why so many programmers hold agile in such a low esteem? Were the authors of the agile manifest wrong in the first place, has environment changed so much in the last 10 years, or agile just does not scale to average programmers?\nIn my talk at Agile Slovenia I've presented a thesis that transformation to agile causes much bigger change in individuals than anticipated by the promoters of agile. Natural resistance to change, if left unattended, makes programmers reject agile altogether since they correlate the push for change with the start of transformation to agile. In my experience there are for four side-effects of agile that programmers find particularly hard to cope with. These are:\nGeneralization of the Specialist\nExtrovertion of the Introvert\nProductivization of the Engineer\nSuppression of Excellence\nNext week, I'll explain in greater detail these side-effects and present some remedies that I've found successful for helping programmers cope with the changes caused by transformation from taylorism to agile.", "title": "Anti-agile Manifesto"}, {"body": "Agile Slovenia 2012 was a big success. Not only did Voranc manage to get hundred people attending it, but the line up of speakers was excellent (even if I'm excluded  )\nMy personal favorite was the talk by Andrea Provaglio who gave a very broad and humanistic presentation of the shift away from Taylorism in our society.\nAndrea Provaglio on mental models blocking our view.\nYou can check Andrea's slide deck here:\nI hope that Agile Slovenia will become a traditional event. A large turn up clearly demonstrates the need for such a conference not only in Slovenia, but also in Croatia from were more than dozen people came from. I'd like to see the conference further expanding it's regional character, since good agile conferences are missing throughout central Europe.", "title": "Agile Slovenia 2012"}, {"body": "The study of computer science at University of Ljubljana is entering its fifth decade of existence. If computer science was an exciting novelty in the early seventies, it is now well established discipline and profession. As part of the next week's alumni meet up, we plan to organize a panel of alumni of Faculty of Computer and Information science of various generations to see how the study and the computer profession have changed over time. We are glad to announce an exciting line up of panel's participants.\nAndrej Ku\u0161\u010der is most well known as one of the four founders of Hermes Softlab (now ComTrade) that was the breeding ground of most Slovenian software developers. Later on he founded and led another well-known Slovenian software company Marg.\nJana Babnik Gomi\u0161\u010dek, Ph.D., has been a top manager at Slovenian subsidiaries of IBM and HP, advisor to the board and director of Brussels office at SRC, and vice-president of science and technology council of Republic of Slovenia.\nBla\u017e Zupan, Ph.D., is a professor at FRI where he lectures about machine learning, data mining and decision support. He's a world class expert in applying data mining and AI techniques to the field of systems biology.\nThe final panel participant will be Andra\u017e Tori, a cofounder and CTO of Zemanta, that all readers of this blog already very well know.\nIf you are an alumni of FRI and you haven't registered, please do so at  http://alumnifri.eventbrite.com/ Please help us with event organization and register for the event early.", "title": "Alumni Meetup Panel"}, {"body": "Ten years ago I've read the book by Pekka Himanen The Hacker Ethic and the Spirit of the Information Age. The book had profound influence on me since it validated my feelings that work should be about passion and creativity, and not just about money. Reflecting now on the changes in our society in the past decade, it is evident that younger generations are no longer treating work as duty but are expecting to realize themselves through it. Especially the recent trend that \"startups are the new black\" clearly demonstrates rejection of destructive hedonism of their parents by the children of the hippie generation, which is being replaced not by the protestant ethic of their forefathers but by the \"yes we can\" attitude of 18th century enlightened aristocracy which has its roots in thousands years of western academic tradition.\nIf you want to understand the larger changes happening in our society brought about by hackers and information technology, this book is an excellent vantage point. Thanks to the hard work of many hackers over past half a century it is only 1-click away.", "title": "The Hacker Ethic and the Spirit of the Information Age"}, {"body": "One of the more important functions of a technical manager in a startup is to prevent programmers from producing code. This might sound rather odd since the assumed role of programmers is to produce code, isn't it. But every new line of code in your code base increases the complexity of your product and long term support costs. Consequently, you should only write code that it's really bringing value to your users or substantially streamlining your internal processes.\nMost programmers on the other hand love to code. They love to be given a clear cut specification of what needs to be coded, so they can work in solitude on their well-defined puzzle. Well, dear programmers, the world has changed. The \"good old days\" of waterfall development process and omniscient project managers are long gone and fast-paced world of startups requires not only your coding skills, but even more importantly your helping hand in product discovery process. So, stop pushing code and start experimenting, measuring, discussing and interviewing instead.", "title": "Give me Something to Code"}, {"body": "Hiring people, initiating projects, or founding an organization is easy. You give jobs to people, you disperse money, and everybody loves you. But it's much more tough firing people, terminating projects, or cut useless bureaucracy. You'll make lifelong enemies, people will initiate smear campaigns againsts you, and there are seldom any immediate benefits for you. Because terminating things is not easy most managers, founders, politicians, sport coaches, and others in charge wait with tough decisions until they are pushed against the wall and are left with no other option.\nThe strategy I personally use in such situations is to imagine what could be, not only what it is. I imagine what great people could we hire, if we make room in the budget for them. I imagine how faster we could push a promising initiative, if our resources wouldn't be tied in hopeless projects. I imagine what great users could we support, if we wouldn't be stuck with existing low potential customers.\nThese rationalizations help in making terminating decisions. But to take action, the most effective strategy seems to be to look at one's paycheck, ownership share, or vote tally. The tough choices you have to make are the reason why you're getting higher wage, larger stake, or more votes.", "title": "Terminating things"}, {"body": "I'm glad to announce that alumni association of Faculty of Computer and Information science of University of Ljubljana will have its founding meeting on October 11th, 2012 at 6pm. The meeting will take place at National Museum of Contemporary History. As part of the event, guided tours of GOTO1982 exhibition will be given.\nThe meeting will be a perfect opportunity to reconnect with old friends and meet computer scientists and professionals of all generations.\nPlease, register for the event here. The registration fee covers costs of renting the place and banquet.\nHelp us spread the word and notify your fellow alumni about the event.", "title": "Alumni UL FRI meetup"}, {"body": "When I was 14 years old I got a chance to intern with Drago Brank at his company that was developing accounting software for DEC VAX. It was an amazing experience that still defines me even 22 years later. I've spent just a couple of weeks there, but that was my first encounter with the professional software development. Drago started his career in the seventies programming mainframes in Germany. With his extensive experience, he was able to give me lots of interesting tasks of which I particularly remember developing text editor in assembler. This required studying one meter of manuals that have come with VAX and nothing in computing could scare me ever since. I'm pretty certain that my professional career could turn very differently if it wouldn't be for this internship. Therefore I'm very glad that in October we'll have a 16 year old pupil from Kranj technical high school interning with us. Who knows, maybe this internship will be as defining for Jan as was my internship with Drago for me.", "title": "Internship"}, {"body": "Yesterday Marko wrote an interesting post about quality of the product and how too much of it can kill the product due to increased costs required to build it. While I agree with Marko's assertion, I would really advise against treating quality as tunable parameter on a per-product basis.\nAs Japanese have shown in the 1970s and 1980s quality can only be achievable through company culture, and not by having quality enforcement as a separate function (the approach by American companies at that time). The only way to influence company culture is by selecting people that fit, promote, and keep the culture that the company wants. There was nothing wrong with Nick whom Marko describes in his post. His focus on quality would be a major advantage if the company which hired him wanted to introduce more stress on quality in their culture. But it seems that the hiring process at the company in question was inadequate and their culture not explicit enough, which resulted in hiring Nick whose principles and values were not compatible with the goals of the company.\nSo, Marko, next time don't blame engineers for the mistakes made by the management", "title": "Managing Quality"}, {"body": "Fresh from school most of us had a very vague concept of our future professional career. But over the years we had formed a strong self-concept holding our internal career together even as we experience dramatic changes in our external career. Edgar Schien of MIT Sloan School of Management named these self-concepts career anchors and defined them as consisting of self-perceived talents and abilities, basic values, and, most important, the evolved sense of motives and needs as they pertain to the career. Schien had identified the following career anchors (see here for their descriptions):\nAutonomy/independence\nSecurity/stability\nTechnical-functional competence\nGeneral managerial competence\nEntrepreneurial Creativity\nService or dedication to a cause\nPure Challenge\nLife style.\nSo, the next time you'll wonder why somebody made a choice you find hard to understand it just might be that the alternative choices would go against values and motives that the person just will not/cannot give up.\nIf I got you interested in the theory of career anchors, you should read the full paper by Edgar Schien published in NHRD Journal.", "title": "Career Anchors"}, {"body": "A friend of mine and a few colleagues of his have developed a very nice business analytics tool. While they do have a couple of test users, it is evident from the product that they built it almost entirely out of fascination for technology. I'm an engineer by nature myself so I can very much relate to them. But the truth that usually come as a big surprise to engineers is that users are not buying technology, but solutions to their problems.\nIt is here where we, the engineers, usually fail when developing solutions. Our fascination with technology prevents us from seeing that the principal part of the solution is to find lucrative market, accessible users, penetrable distribution channels, and repeatable sales, and not to use the latest and greatest technology. I've advised my friend to read either Steve Blank's The Four Steps to the Epiphany, Eric Ries' The Lean Startup, or Marty Cagan's Inspired. I hope my friend will read at least one of these books. The technology they have developed is very nice. But the technology is only the first step on a long journey to a successful, repeatable business model.", "title": "Product Discovery for Engineers"}, {"body": "One third of Zemanta team are Americans. Consequently we get to see first hand some interesting cultural differences between the American and European culture. One such difference that I've stumbled upon on my recent trip to our New York office is the concept of over-education. I've never heard this word before and there's no equivalent word in Slovenian. For Europeans education is goal in itself and it is just impossible for somebody to be too educated, but as the American English word over-education clearly demonstrates practical Americans consider education a means to an end and not an end in itself.\nI often hear the argument that Slovenian education should teach more practical skills, so that people are more useful to companies. I very much disagree with this approach. I think the primary goal of education should be to make people more useful to society, and only as a consequence, to the companies. Most of the companies and technologies that are successful today, won't exists twenty years from now. If we, the society, don't want to get stuck with outdated people in the future, we should prepare our children not only for the challenges of today enterprises, but more importantly, to the unknown challenges of the future start-ups. In that regard the concept of over-education seems a very stupid idea.\nWe're Under-educating Ourselves Into Another Crash\nThis is absolutely not meant to be a political statement  -  I try to stay neutral on my blog, LinkedIn , Twitter , and only let my hair down marginally on Facebook . All that said, something's been bothering me. I'm in recruiting  -  if anybody's going to feel employment moving as part of their day-to-day, it's us.\nvia: recruiter.wordpress.com", "title": "Over-education"}, {"body": "If your first thought when you hear \"Mobile first!\" is about building your product for small screen sizes than you're missing the point. While screen size is a factor to consider, it is not the most important one when deciding to go \"Mobile first!\" Much more important factors are increased ease of use and instant accessibility that this approach brings to your product. I think that \"Mobile first!\" strategy is a great way how to focus the whole product discovery team on essential features and their effective presentation to the user, and to prevent featuritis taking over your product.\nAt the moment, 15% of web consumption happens on mobile and the percentage is rapidly increasing. You can efficiently leverage this transition not only to conquer the new mobile market, but also to reinvigorate your existing desktop offering.", "title": "Mobile first!"}, {"body": "Recently we've done a small reorganization of our team. Instead of one large 12-person team of engineers and product developers, we set two teams, each with 5 engineers and a dedicated product owner. I've become a scrum master in one of the teams (we've named ourselves Team Badger) and I've already noticed substantial changes in how my team functions.\nScrum doesn't have lots of rules but it enforces them forcefully. But immediately upon splitting the team, I've noticed that several of Scrum practices no longer make sense to do. The whole Badger team resides in a single room and we are all working on the same project. Whenever somebody completes a task or run into problems, he shouts out immediately and everybody swarms around to see the result or help solve the problem. Consequently, daily stand-up meetings and demos at the end of the sprint seemed redundant and we have abandoned them.\nI'm carefully observing also other scrum practices that we still do. If we'll notice that any of these practices no longer make sense, we might trim down scrum even more.", "title": "Relaxing Scrum"}, {"body": "I was doing a code review yesterday. It was one of those rare code reviews where there is more code on the left than on the right. This made me very happy, but it also got me confused: \"Shouldn't I be at least a bit sad that hard work of a programmer is wiped out of existence?\"\nAgile and lean approaches rarely focus on removing features from the product. And when they do, it's because a feature is distracting or confusing user. Sometimes a feature is removed because it's evidently costly to support, but I've never seen anybody doing systematic reevaluation of existing product features and removing the ones which do not bring enough value.\nI understand that admitting failure is hard and that you might piss off a few users if you remove their beloved feature. But as is the case with food, staying lean cannot be achieved only by carefully adding, at least occasionally you must also loose something.", "title": "Staying Lean"}, {"body": "One of the core values of Extreme Programming is feedback. By demonstrating our work to end users early and often, we can focus on building products and features that have the most value for the user. But receiving feedback from users is not always as pleasant and rewarding as described by Rod in his recent post on this subject. On the contrary, more often than not you feel really stupid, humbled, and ashamed after watching a real user struggling to use your crap product. That's exactly what has happened to us yesterday upon receiving a user interview video where not only has the user struggled with understanding our product, but the product wasn't working at all for some time.\nBack to the drawing board!", "title": "Facing Feedback"}, {"body": "It seems a bit paradoxical, but quite often the main reason of project or company failure is abundance of resources. If a project/company has too many resources at its disposal, it tends to start complicating things, people start bringing in their own agenda, and the endeavor starts doing everything, without fully committing to anything. Therefore, resources at the disposal of a project or company manager should be scarce, so that the manager is forced to choose and just focus on what's really important to him.\nManaging scarcity is tough. As a manager, you'll have to say 'no' to people a lot and when you say no you piss off people. If you don't want your decisions to appear too arbitrary, you'll have to devise metrics that will clearly show to all stakeholders why some things are important and others are not.\n(This post is very much inspired by a recent conversation with Bo\u0161tjan, Zemanta's CEO)", "title": "Scarcity of Resources"}]